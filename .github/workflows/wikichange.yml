name: Gollum Workflow

on: [gollum,workflow_dispatch]
  

jobs:
  run_script:
    runs-on: ubuntu-latest

    steps:
    - name: Obtenir la réponse de l'API
      id: response
      run: |
        curl -s https://api.github.com/repos/saillantnicolas/testaction/events >> response.json

    - name: Déterminer le nombre d'événements
      id: event_count
      run: |
        eventcount=$(cat response.json | jq '. | length')
        echo "eventcount=$eventcount" >> $GITHUB_OUTPUT

    - name: Boucle pour traiter les événements
      id: event
      run: |
        for ((i=0; i<${{ steps.event_count.outputs.eventcount }}; i++)); do
          if [ "$(cat response.json | jq -r '.['$i'].type')" == "GollumEvent" ];
          then
            event=$(cat response.json | jq '.[0]')
          fi
        done
        echo $event >> event.json

    - name: Obtenir le nom d'utilisateur de l'acteur
      id: actor
      run: |
        actor=$(cat event.json | jq '.actor.login' | tr -d '"')
        echo "actor=$actor" >> $GITHUB_OUTPUT
        
    - name: Déterminer le nombre de pages
      id: pages_count
      run: |
        pagescount=$(cat event.json | jq '.payload.pages | length')
        cat event.json | jq '.payload.pages | length'
        echo "pagescount=$pagescount" >> $GITHUB_OUTPUT

    - name: Boucle pour traiter les pages du wiki
      id: messages
      run: |
        date=$(cat event.json | jq '.created_at' | tr -d '"')
        for ((i=0; i<${{ steps.pages_count.outputs.pagescount }}; i++)); do
          action=$(cat event.json | jq '.payload.pages['$i'].action' | tr -d '"')
          wiki_page=$(cat event.json | jq '.payload.pages['$i'].title' | tr -d '"')
          page_url=$(cat event.json | jq '.payload.pages['$i'].html_url' | tr -d '"')
          echo "Page $i" >> messages.txt
          echo "Actor : ${{ steps.actor.outputs.actor }}" >> messages.txt
          echo "Action $action" >> messages.txt
          echo "Wiki Page : $wiki_page" >> messages.txt
          echo "Page URL : $page_url" >> messages.txt
          echo "Date : $date" >> messages.txt
        done
        
    - name: install ssh keys
      run: |
        install -m 600 -D /dev/null ~/.ssh/id_rsa
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        ssh-keyscan -H ${{ vars.SSH_HOST }} > ~/.ssh/known_hosts
    - name: run script
      run: |
        ls
        cat messages.txt
        #cat messages.txt | ssh ${{ secrets.SSH_USER }}@${{ vars.SSH_HOST }} "/sbin/sendmail -t saillantnicolas01@gmail.com"
